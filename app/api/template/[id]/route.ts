import { readTemplateStructureFromJson, saveTemplateStructureToJson } from "@/features/playground/libs/path-to-json";
import { db } from "@/lib/db";
import { templatePaths } from "@/lib/template";
import path from "path";
import fs from "fs/promises";
import { NextRequest } from "next/server";

// Helper function to ensure valid JSON
function validateJsonStructure(data: unknown): boolean {
  try {
    JSON.parse(JSON.stringify(data)); // Ensures it's serializable
    return true;
  } catch (error) {
    console.error("Invalid JSON structure:", error);
    return false;
  }
}

// Helper function to check if directory exists
async function directoryExists(dirPath: string): Promise<boolean> {
  try {
    const stat = await fs.stat(dirPath);
    return stat.isDirectory();
  } catch {
    return false;
  }
}

// Create a fallback template when the actual template directory doesn't exist
function createFallbackTemplate(templateKey: string) {
  const templates: Record<string, any> = {
    NEXTJS: {
      folderName: "nextjs-project",
      items: [
        {
          filename: "package",
          fileExtension: "json",
          content: JSON.stringify({
            "name": "nextjs-project",
            "version": "0.1.0",
            "private": true,
            "scripts": {
              "dev": "next dev",
              "build": "next build",
              "start": "next start",
              "lint": "next lint"
            },
            "dependencies": {
              "next": "14.0.0",
              "react": "^18",
              "react-dom": "^18"
            },
            "devDependencies": {
              "@types/node": "^20",
              "@types/react": "^18",
              "@types/react-dom": "^18",
              "typescript": "^5"
            }
          }, null, 2)
        },
        {
          filename: "next.config",
          fileExtension: "js",
          content: `/** @type {import('next').NextConfig} */
const nextConfig = {}

module.exports = nextConfig`
        },
        {
          filename: "tsconfig",
          fileExtension: "json",
          content: JSON.stringify({
            "compilerOptions": {
              "target": "es5",
              "lib": ["dom", "dom.iterable", "es6"],
              "allowJs": true,
              "skipLibCheck": true,
              "strict": true,
              "noEmit": true,
              "esModuleInterop": true,
              "module": "esnext",
              "moduleResolution": "bundler",
              "resolveJsonModule": true,
              "isolatedModules": true,
              "jsx": "preserve",
              "incremental": true,
              "plugins": [
                {
                  "name": "next"
                }
              ],
              "paths": {
                "@/*": ["./*"]
              }
            },
            "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
            "exclude": ["node_modules"]
          }, null, 2)
        },
        {
          folderName: "app",
          items: [
            {
              filename: "layout",
              fileExtension: "tsx",
              content: `import './globals.css'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}
`
            },
            {
              filename: "page",
              fileExtension: "tsx",
              content: `export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex">
        <h1 className="text-4xl font-bold">Welcome to Next.js!</h1>
        <p className="mt-4 text-xl">
          Get started by editing{' '}
          <code className="font-mono font-weight-bold">app/page.tsx</code>
        </p>
      </div>
    </main>
  )
}
`
            },
            {
              filename: "globals",
              fileExtension: "css",
              content: `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}
`
            }
          ]
        }
      ]
    },
    REACT: {
      folderName: "react-project",
      items: [
        {
          filename: "package",
          fileExtension: "json",
          content: JSON.stringify({
            "name": "react-project",
            "version": "0.1.0",
            "private": true,
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0"
            },
            "scripts": {
              "start": "react-scripts start",
              "build": "react-scripts build",
              "test": "react-scripts test",
              "eject": "react-scripts eject"
            }
          }, null, 2)
        },
        {
          filename: "index",
          fileExtension: "html",
          content: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`
        },
        {
          folderName: "src",
          items: [
            {
              filename: "index",
              fileExtension: "js",
              content: `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`
            },
            {
              filename: "App",
              fileExtension: "js",
              content: `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to React!</h1>
        <p>Edit <code>src/App.js</code> and save to reload.</p>
      </header>
    </div>
  );
}

export default App;`
            },
            {
              filename: "App",
              fileExtension: "css",
              content: `.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  padding: 20px;
  color: white;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
}

.App-header h1 {
  margin: 0 0 20px 0;
}`
            },
            {
              filename: "index",
              fileExtension: "css",
              content: `body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}`
            }
          ]
        }
      ]
    },
    EXPRESS: {
      folderName: "express-project",
      items: [
        {
          filename: "package",
          fileExtension: "json",
          content: JSON.stringify({
            "name": "express-project",
            "version": "1.0.0",
            "description": "Express.js starter project",
            "main": "index.js",
            "scripts": {
              "start": "node index.js",
              "dev": "nodemon index.js"
            },
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5"
            },
            "devDependencies": {
              "nodemon": "^2.0.20"
            }
          }, null, 2)
        },
        {
          filename: "index",
          fileExtension: "js",
          content: `const express = require('express');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes
app.get('/', (req, res) => {
  res.json({
    message: 'Welcome to Express.js!',
    timestamp: new Date().toISOString()
  });
});

app.get('/api/users', (req, res) => {
  res.json({
    users: [
      { id: 1, name: 'John Doe', email: 'john@example.com' },
      { id: 2, name: 'Jane Smith', email: 'jane@example.com' }
    ]
  });
});

// Start server
app.listen(PORT, () => {
  console.log(\`Server running on http://localhost:\${PORT}\`);
});`
        },
        {
          filename: "README",
          fileExtension: "md",
          content: `# Express.js Starter Project

A simple Express.js server with basic middleware and routes.

## Getting Started

1. Install dependencies:
   \`\`\`
   npm install
   \`\`\`

2. Start development server:
   \`\`\`
   npm run dev
   \`\`\`

3. Start production server:
   \`\`\`
   npm start
   \`\`\`

The server will be running at http://localhost:3000
`
        }
      ]
    },
    VUE: {
      folderName: "vue-project",
      items: [
        {
          filename: "package",
          fileExtension: "json",
          content: JSON.stringify({
            "name": "vue-project",
            "version": "0.1.0",
            "private": true,
            "scripts": {
              "serve": "vue-cli-service serve",
              "build": "vue-cli-service build",
              "lint": "vue-cli-service lint"
            },
            "dependencies": {
              "core-js": "^3.8.3",
              "vue": "^3.2.13"
            },
            "devDependencies": {
              "@vue/cli-plugin-babel": "~5.0.0",
              "@vue/cli-plugin-eslint": "~5.0.0",
              "@vue/cli-service": "~5.0.0"
            }
          }, null, 2)
        },
        {
          filename: "index",
          fileExtension: "html",
          content: `<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Vue.js App</title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but Vue.js App doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>`
        },
        {
          folderName: "src",
          items: [
            {
              filename: "main",
              fileExtension: "js",
              content: `import { createApp } from 'vue'
import App from './App.vue'

createApp(App).mount('#app')`
            },
            {
              filename: "App",
              fileExtension: "vue",
              content: `<template>
  <div id="app">
    <img alt="Vue logo" src="./assets/logo.png">
    <HelloWorld msg="Welcome to Your Vue.js App"/>
  </div>
</template>

<script>
import HelloWorld from './components/HelloWorld.vue'

export default {
  name: 'App',
  components: {
    HelloWorld
  }
}
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>`
            },
            {
              folderName: "components",
              items: [
                {
                  filename: "HelloWorld",
                  fileExtension: "vue",
                  content: `<template>
  <div class="hello">
    <h1>{{ msg }}</h1>
    <p>
      For a guide and recipes on how to configure / customize this project,<br>
      check out the
      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.
    </p>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',
  props: {
    msg: String
  }
}
</script>

<style scoped>
h3 {
  margin: 40px 0 0;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
</style>`
                }
              ]
            }
          ]
        }
      ]
    },
    HONO: {
      folderName: "hono-project",
      items: [
        {
          filename: "package",
          fileExtension: "json",
          content: JSON.stringify({
            "name": "hono-project",
            "version": "1.0.0",
            "description": "Hono.js starter project",
            "main": "index.js",
            "scripts": {
              "start": "node index.js",
              "dev": "node --watch index.js"
            },
            "dependencies": {
              "hono": "^3.0.0"
            }
          }, null, 2)
        },
        {
          filename: "index",
          fileExtension: "js",
          content: `import { Hono } from 'hono'
import { serve } from '@hono/node-server'

const app = new Hono()

app.get('/', (c) => {
  return c.json({
    message: 'Welcome to Hono!',
    timestamp: new Date().toISOString()
  })
})

app.get('/api/hello/:name', (c) => {
  const name = c.req.param('name')
  return c.json({
    message: \`Hello, \${name}!\`
  })
})

const port = 3000
console.log(\`Server is running on port \${port}\`)

serve({
  fetch: app.fetch,
  port
})`
        },
        {
          filename: "README",
          fileExtension: "md",
          content: `# Hono.js Starter Project

A lightweight and fast web framework for Node.js.

## Getting Started

1. Install dependencies:
   \`\`\`
   npm install
   \`\`\`

2. Start development server:
   \`\`\`
   npm run dev
   \`\`\`

3. Start production server:
   \`\`\`
   npm start
   \`\`\`

The server will be running at http://localhost:3000
`
        }
      ]
    },
    ANGULAR: {
      folderName: "angular-project",
      items: [
        {
          filename: "package",
          fileExtension: "json",
          content: JSON.stringify({
            "name": "angular-project",
            "version": "0.0.0",
            "scripts": {
              "ng": "ng",
              "start": "ng serve",
              "build": "ng build",
              "watch": "ng build --watch --configuration development",
              "test": "ng test"
            },
            "dependencies": {
              "@angular/animations": "^17.0.0",
              "@angular/common": "^17.0.0",
              "@angular/compiler": "^17.0.0",
              "@angular/core": "^17.0.0",
              "@angular/forms": "^17.0.0",
              "@angular/platform-browser": "^17.0.0",
              "@angular/platform-browser-dynamic": "^17.0.0",
              "@angular/router": "^17.0.0",
              "rxjs": "~7.8.0",
              "tslib": "^2.3.0",
              "zone.js": "~0.14.0"
            },
            "devDependencies": {
              "@angular-devkit/build-angular": "^17.0.0",
              "@angular/cli": "^17.0.0",
              "@angular/compiler-cli": "^17.0.0",
              "typescript": "~5.2.0"
            }
          }, null, 2)
        },
        {
          filename: "angular",
          fileExtension: "json",
          content: JSON.stringify({
            "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
            "version": 1,
            "newProjectRoot": "projects",
            "projects": {
              "angular-project": {
                "projectType": "application",
                "schematics": {},
                "root": "",
                "sourceRoot": "src",
                "prefix": "app",
                "architect": {
                  "build": {
                    "builder": "@angular-devkit/build-angular:browser",
                    "options": {
                      "outputPath": "dist/angular-project",
                      "index": "src/index.html",
                      "main": "src/main.ts",
                      "polyfills": ["zone.js"],
                      "tsConfig": "tsconfig.app.json",
                      "assets": ["src/favicon.ico", "src/assets"],
                      "styles": ["src/styles.css"],
                      "scripts": []
                    }
                  },
                  "serve": {
                    "builder": "@angular-devkit/build-angular:dev-server",
                    "options": {}
                  }
                }
              }
            }
          }, null, 2)
        },
        {
          folderName: "src",
          items: [
            {
              filename: "index",
              fileExtension: "html",
              content: `<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Angular Project</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>`
            },
            {
              filename: "main",
              fileExtension: "ts",
              content: `import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent)
  .catch((err) => console.error(err));`
            },
            {
              folderName: "app",
              items: [
                {
                  filename: "app.component",
                  fileExtension: "ts",
                  content: `import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: \`
    <div>
      <h1>Welcome to Angular!</h1>
      <p>Congratulations! Your app is running. 🎉</p>
    </div>
  \`,
  styles: [\`
    div {
      text-align: center;
      font-family: Arial, sans-serif;
      padding: 2rem;
    }
    h1 {
      color: #dd0031;
    }
  \`]
})
export class AppComponent {
  title = 'angular-project';
}`
                }
              ]
            }
          ]
        }
      ]
    }
  };

  // Return the specific template or a generic fallback
  return templates[templateKey] || {
    folderName: "project",
    items: [
      {
        filename: "README",
        fileExtension: "md",
        content: `# ${templateKey} Project

This is a fallback template for ${templateKey}.

## Getting Started

This template was generated automatically because the original template directory was not found.

## Available Commands

- Start development server: \`npm start\`
- Build for production: \`npm run build\`

Happy coding! 🚀
`
      },
      {
        filename: "package",
        fileExtension: "json",
        content: JSON.stringify({
          "name": templateKey.toLowerCase() + "-project",
          "version": "1.0.0",
          "description": `${templateKey} starter project`,
          "main": "index.js",
          "scripts": {
            "start": "echo 'Hello from " + templateKey + "!'"
          }
        }, null, 2)
      }
    ]
  };
}

export async function GET(
  _request: NextRequest,
  ctx: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await ctx.params;

    if (!id) {
      console.error("Missing playground ID");
      return Response.json({ error: "Missing playground ID" }, { status: 400 });
    }

    console.log("Loading playground with ID:", id);

    const playground = await db.playground.findUnique({
      where: { id },
    });

    if (!playground) {
      console.error("Playground not found for ID:", id);
      return Response.json({ error: "Playground not found" }, { status: 404 });
    }

    console.log("Playground found:", playground);

    // Check if template field exists and is valid
    if (!playground.template) {
      console.error("Playground has no template specified:", id);
      return Response.json({ error: "No template specified for this playground" }, { status: 400 });
    }

    const templateValue = playground.template as string;
    console.log("Raw template value from DB:", templateValue);

    // Try to find matching template key (case-insensitive)
    let templateKey: keyof typeof templatePaths | null = null;
    let templatePath: string | null = null;

    // First try exact match
    if (templateValue in templatePaths) {
      templateKey = templateValue as keyof typeof templatePaths;
      templatePath = templatePaths[templateKey];
    } else {
      // Try case-insensitive match
      const upperTemplate = templateValue.toUpperCase();
      if (upperTemplate in templatePaths) {
        templateKey = upperTemplate as keyof typeof templatePaths;
        templatePath = templatePaths[templateKey];
      } else {
        // Try to find by matching the directory name
        for (const [key, path] of Object.entries(templatePaths)) {
          const dirName = path.split('/').pop()?.toLowerCase();
          if (dirName === templateValue.toLowerCase()) {
            templateKey = key as keyof typeof templatePaths;
            templatePath = path;
            break;
          }
        }
      }
    }

    if (!templateKey || !templatePath) {
      console.error("Invalid template value:", templateValue, "Available keys:", Object.keys(templatePaths));
      console.error("Available template paths:", Object.values(templatePaths));
      return Response.json({ 
        error: "Invalid template",
        details: `Template "${templateValue}" not found. Available templates: ${Object.keys(templatePaths).join(', ')}`
      }, { status: 404 });
    }

    const inputPath = path.join(process.cwd(), templatePath);
    const outputFile = path.join(process.cwd(), `output/${templateKey}.json`);

    console.log("Template key:", templateKey);
    console.log("Input Path:", inputPath);
    console.log("Output Path:", outputFile);

    // Check if the template directory exists
    const dirExists = await directoryExists(inputPath);
    if (!dirExists) {
      console.error("Template directory does not exist:", inputPath);
      console.log("Available directories in lileecode-starters:");
      try {
        const startersDir = path.join(process.cwd(), 'lileecode-starters');
        const startersDirExists = await directoryExists(startersDir);
        if (startersDirExists) {
          const dirs = await fs.readdir(startersDir);
          console.log("Available starter directories:", dirs);
        } else {
          console.log("lileecode-starters directory does not exist in production - this is expected on Vercel");
        }
      } catch (err) {
        console.log("Could not read lileecode-starters directory:", err);
        console.log("This is expected on Vercel deployment where template directories are not included");
      }
      
      // Return a fallback template instead of erroring out
      console.log("🚀 Returning fallback template for:", templateKey);
      const fallbackTemplate = createFallbackTemplate(templateKey);
      
      if (!fallbackTemplate || !fallbackTemplate.items || fallbackTemplate.items.length === 0) {
        console.error("Fallback template is empty or invalid for:", templateKey);
        return Response.json({ 
          error: "Template not available",
          details: `No template or fallback available for ${templateKey}`
        }, { status: 404 });
      }

      console.log("✅ Fallback template created successfully with", fallbackTemplate.items.length, "items");
      
      return Response.json({ 
        success: true, 
        templateJson: fallbackTemplate,
        fallback: true,
        message: `Using fallback template for ${templateKey}. Template directories are not available in this environment (likely Vercel production).`
      }, { status: 200 });
    }

    // Ensure output directory exists
    const outputDir = path.dirname(outputFile);
    await fs.mkdir(outputDir, { recursive: true });

    // Save and read the template structure
    await saveTemplateStructureToJson(inputPath, outputFile);
    const result = await readTemplateStructureFromJson(outputFile);

    console.log("Template structure loaded successfully, items count:", Array.isArray(result) ? result.length : 'N/A');

    // Validate the JSON structure before returning
    if (!validateJsonStructure(result)) {
      console.error("Invalid JSON structure in result");
      return Response.json({ error: "Invalid JSON structure" }, { status: 500 });
    }

    // Clean up the temporary file
    try {
      await fs.unlink(outputFile);
    } catch (unlinkError) {
      console.warn("Could not delete temporary file:", unlinkError);
    }

    return Response.json({ success: true, templateJson: result }, { status: 200 });

  } catch (error) {
    console.error("Error in template API route:", error);
    return Response.json({ 
      error: "Failed to generate template",
      details: error instanceof Error ? error.message : "Unknown error"
    }, { status: 500 });
  }
}

export async function PUT(
  request: NextRequest,
  ctx: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await ctx.params;
    const body = await request.json();

    if (!id) {
      return Response.json({ error: "Missing playground ID" }, { status: 400 });
    }

    if (!body.templateData) {
      return Response.json({ error: "Missing template data" }, { status: 400 });
    }

    // Validate the template data structure
    if (!validateJsonStructure(body.templateData)) {
      return Response.json({ error: "Invalid template data structure" }, { status: 400 });
    }

    // Update the playground's template files in the database
    const playground = await db.playground.findUnique({
      where: { id },
    });

    if (!playground) {
      return Response.json({ error: "Playground not found" }, { status: 404 });
    }

    // Update or create template file record
    const existingFile = await db.templateFile.findFirst({
      where: { playgroundId: id }
    });

    if (existingFile) {
      await db.templateFile.update({
        where: { id: existingFile.id },
        data: { content: JSON.stringify(body.templateData) }
      });
    } else {
      await db.templateFile.create({
        data: {
          playgroundId: id,
          content: JSON.stringify(body.templateData)
        }
      });
    }

    return Response.json({ success: true, message: "Template updated successfully" }, { status: 200 });

  } catch (error) {
    console.error("Error updating template:", error);
    return Response.json({
      error: "Failed to update template",
      details: error instanceof Error ? error.message : "Unknown error"
    }, { status: 500 });
  }
}

